// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name init -> sync database
// npx prisma db push -> sync database
// npx prisma studio -> view database
// npx prisma generate -> generate prisma client

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DIRECT_URL") // uses a direct connection
}

// enums

enum Role {
  USER
  ADMIN
  DEV
}

enum Status {
  ACTIVE
  INACTIVE
  DRAFT
  PUBLISHED
}

enum Priority {
  URGENT_IMPORTANT
  NOT_URGENT_IMPORTANT
  URGENT_UNIMPORTANT
  NOT_URGENT_UNIMPORTANT
}

enum Frequency {
  DAY
  WEEK
  MONTH
  YEAR
}

enum Weekdays {
  MO
  TU
  WE
  TH
  FR
  SA
  SU
}

enum SyncStatus {
  PENDING
  SYNCED
  SAVED
  ERROR
  DELETED
}

enum Context {
  BLOG
  TASKS
}

enum ViewType {
  LIST
  BOARD
  CALENDAR
}

enum GroupSort {
  PRIORITY
  CATEGORY
  DATE
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

// models

model Profile {
  id         String  @id
  user_name  String?
  first_name String?
  last_name  String?
  bio        String?
  avatar     String?
  phone      String?
  role       Role    @default(USER)
  status     Status  @default(ACTIVE)

  posts           Post[]
  comments        Comment[]
  replies         Reply[]
  recurring_rules RecurringRule[]
  tasks           Task[]
  reminders       Reminder[]
  categories      Category[]
  tags            Tag[]
  views           View[]
  notifications   Notification[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("profiles")
}

model Category {
  id          String     @id @default(uuid())
  title       String
  color       String
  status      Status     @default(ACTIVE)
  context     Context
  sync_status SyncStatus @default(SYNCED)

  profile    Profile? @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String?

  posts Post[]
  tasks Task[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map(name: "categories")
}

model Tag {
  id          String     @id @default(uuid())
  title       String
  color       String
  status      Status     @default(ACTIVE)
  context     Context
  sync_status SyncStatus @default(SYNCED)

  profile    Profile? @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String?

  posts Post[]
  tasks Task[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([title])
  @@map(name: "tags")
}

model Post {
  id             String  @id @default(uuid())
  image          String
  title          String
  excerpt        String
  content        String
  allow_comments Boolean @default(true)
  view_count     Int     @default(0)
  status         Status  @default(DRAFT)

  profile     Profile?  @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id  String?
  category    Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  category_id String?

  tags     Tag[]
  comments Comment[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([profile_id, title])
  @@map(name: "posts")
}

model Comment {
  id      String  @id @default(uuid())
  name    String?
  content String
  status  Status  @default(ACTIVE)

  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id    String
  profile    Profile? @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String?

  replies Reply[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([name, content, post_id, profile_id])
  @@map(name: "comments")
}

model Reply {
  id      String  @id @default(uuid())
  name    String?
  content String
  status  Status  @default(ACTIVE)

  reply_id   String?
  comment    Comment? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  comment_id String?
  profile    Profile? @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([name, content, reply_id, comment_id, profile_id])
  @@map(name: "replies")
}

model RecurringRule {
  id          String     @id @default(uuid())
  frequency   Frequency
  interval    Int        @default(1)
  day_of_week Weekdays[]
  end_date    DateTime?
  sync_status SyncStatus @default(SYNCED)

  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String

  tasks Task[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map(name: "recurring_rules")
}

model Task {
  id          String     @id @default(uuid())
  title       String
  complete    Boolean    @default(false)
  description String?
  due_date    DateTime?
  priority    Priority   @default(NOT_URGENT_UNIMPORTANT)
  sync_status SyncStatus @default(SYNCED)

  profile           Profile        @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id        String
  category          Category?      @relation(fields: [category_id], references: [id], onDelete: SetNull)
  category_id       String?
  recurring_rule    RecurringRule? @relation(fields: [recurring_rule_id], references: [id])
  recurring_rule_id String?

  tags      Tag[]
  reminders Reminder[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map(name: "tasks")
}

model Reminder {
  id          String     @id @default(uuid())
  remind_at   DateTime
  sent        Boolean    @default(false)
  sync_status SyncStatus @default(SYNCED)

  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String
  task       Task    @relation(fields: [task_id], references: [id], onDelete: Cascade)
  task_id    String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map(name: "reminders")
}

model View {
  id              String         @id @default(uuid())
  title           String
  view            ViewType?      @default(LIST)
  sort_by         GroupSort?     @default(DATE)
  sort_direction  SortDirection? @default(DESCENDING)
  group_by        GroupSort?
  category_filter String?
  priority_filter Priority?
  sync_status     SyncStatus     @default(SYNCED)

  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([title])
  @@map(name: "views")
}

model Notification {
  id             String     @id @default(uuid())
  endpoint       String
  endpointId     String
  expirationTime BigInt?
  p256dh         String
  auth           String
  sync_status    SyncStatus @default(SYNCED)

  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([endpointId])
  @@map(name: "notifications")
}
