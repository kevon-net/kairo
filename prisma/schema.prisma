// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma migrate dev --name init -> sync database
// npx prisma db push -> sync database
// npx prisma studio -> view database
// npx prisma generate -> generate prisma client

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // uses connection pooling
  directUrl = env("DIRECT_URL") // uses a direct connection
}

// enums

enum Role {
  USER
  ADMIN
  DEV
}

enum Status {
  ACTIVE
  INACTIVE
  PAUSED
  DRAFT
  PUBLISHED
}

enum SyncStatus {
  PENDING
  SYNCED
  SAVED
  ERROR
  DELETED
}

enum Context {
  BLOG
  SESSIONS
}

enum SortDirection {
  ASCENDING
  DESCENDING
}

// models

model Profile {
  id         String  @id
  user_name  String?
  first_name String?
  last_name  String?
  bio        String?
  avatar     String?
  phone      String?
  role       Role    @default(USER)
  status     Status  @default(ACTIVE)

  posts         Post[]
  comments      Comment[]
  replies       Reply[]
  tasks         Task[]
  categories    Category[]
  tags          Tag[]
  views         View[]
  notifications Notification[]
  sessions      Session[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("profiles")
}

model Category {
  id          String     @id @default(uuid())
  title       String
  color       String
  status      Status     @default(ACTIVE)
  context     Context
  sync_status SyncStatus @default(SYNCED)

  profile    Profile? @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String?

  posts    Post[]
  tasks    Task[]
  sessions Session[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map(name: "categories")
}

model Tag {
  id          String     @id @default(uuid())
  title       String
  color       String
  status      Status     @default(ACTIVE)
  sync_status SyncStatus @default(SYNCED)

  profile    Profile? @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String?

  posts Post[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([title])
  @@map(name: "tags")
}

model Post {
  id             String  @id @default(uuid())
  image          String
  title          String
  excerpt        String
  content        String
  allow_comments Boolean @default(true)
  view_count     Int     @default(0)
  status         Status  @default(DRAFT)

  profile     Profile?  @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id  String?
  category    Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  category_id String?

  tags     Tag[]
  comments Comment[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([profile_id, title])
  @@map(name: "posts")
}

model Comment {
  id      String  @id @default(uuid())
  name    String?
  content String
  status  Status  @default(ACTIVE)

  post       Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)
  post_id    String
  profile    Profile? @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String?

  replies Reply[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([name, content, post_id, profile_id])
  @@map(name: "comments")
}

model Reply {
  id      String  @id @default(uuid())
  name    String?
  content String
  status  Status  @default(ACTIVE)

  reply_id   String?
  comment    Comment? @relation(fields: [comment_id], references: [id], onDelete: Cascade)
  comment_id String?
  profile    Profile? @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([name, content, reply_id, comment_id, profile_id])
  @@map(name: "replies")
}

model Task {
  id          String     @id @default(uuid())
  title       String
  complete    Boolean    @default(false)
  sync_status SyncStatus @default(SYNCED)

  profile     Profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id  String
  category    Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  category_id String?

  sessions Session[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map(name: "tasks")
}

model Session {
  id             String     @id @default(uuid())
  title          String
  start          DateTime
  end            DateTime?
  pomo_duration  Int? // minutes
  focus_duration Int? // in seconds or minutes (actual work time)
  sync_status    SyncStatus @default(SYNCED)
  status         Status     @default(ACTIVE)

  profile     Profile   @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id  String
  category    Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)
  category_id String?
  task        Task?     @relation(fields: [task_id], references: [id], onDelete: SetNull)
  task_id     String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map(name: "sesions")
}

model View {
  id             String         @id @default(uuid())
  title          String
  sort_direction SortDirection? @default(DESCENDING)
  sync_status    SyncStatus     @default(SYNCED)

  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([title])
  @@map(name: "views")
}

model Notification {
  id             String     @id @default(uuid())
  endpoint       String
  endpointId     String
  expirationTime BigInt?
  p256dh         String
  auth           String
  sync_status    SyncStatus @default(SYNCED)

  profile    Profile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  profile_id String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([endpointId])
  @@map(name: "notifications")
}
